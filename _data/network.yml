network: "The network hierarchy provides the control functions for running data-mining and trading operations. Because operations may be run either on a single machine or distributed over a network of machines, it also contains definitions regarding the physical location in which nodes live or function."

network_node: "A network node represents a machine running Superalgos, on which processes run and data is stored."

data_storage: "The data storage node holds the definitions as to what data is stored in the corresponding network node."

trading_mines_data: "Session-based data refers to data that is generated as a consequence of running a trading session, that is, data the trading bot instance generates while running backtesting, paper trading, forward testing, or live trading sessions."

exchange_trading_products: "The exchange trading products node organizes trading mines data by exchange. That is, each exchange installed in the system has an exchange trading products node grouping all session references corresponding to the said exchange."

trading_session_reference: "A session reference establishes which session is the one which shall store data in the current location."

market_trading_products: "A market trading products node features the group of data products generated by the referenced session in a specific market."

trading_mine_products: "Trading mine products are references established with trading mines to facilitate establishing data product references with multiple products in the given mine."

bot_products: "A bot products node is an organizational device used to arrange data products corresponding to a specific bot."

data_product_folder: "A data product folder node is an organizational device used to map the arrangement of product definition folders as may exist in the bot definition of the corresponding data or trading mine."

data_product: "A data product represents the collection of datasets generated by the instance of a bot as defined in the corresponding data mine or trading mine."

dataset_definition: "A data set is a collection of files stored in the designated location, as per the definitions on the referenced data product in the corresponding data mine."

data_mines_data: "Session independent data refers to data generated by sensors and indicators, not related to trading sessions."

exchange_data_products: "The exchange data products node organizes data mines data by exchange. That is, each exchange installed in the system has an exchange data products node grouping all market data products nodes corresponding to the said exchange."

market_data_products: "A market data products node represents the group of data products generated in a specific market."

data_mine_products: "Data mine products are references established with data mines to facilitate establishing data product references with multiple products in the given data mine."



data_mining: "Data mining is the activity of processing data. You need to process data to feed charts, and so that your trading systems may make decisions based on quality information."

exchange_data_tasks: "The exchange data tasks node organizes data mining tasks by exchange. That is, each exchange installed in the system has an exchange data tasks node grouping all market data tasks corresponding to the said exchange."

market_data_tasks: "A market data tasks node groups data mining tasks operating in a specific market."

data_mine_tasks: "The data mine tasks node is an organizational device that groups tasks corresponding to the referenced data mine."

task_manager: "A task manager is a device used to organize and control any number of tasks, which, in turn, control bot instances. You use a task manager to start or stop several tasks at the same time."

task: "A task is the device used to control bot instances, that is, to start and stop bots, including sensors, indicators and the trading bot."

indicator_bot_instance: "An indicator bot instance is a reference to an indicator bot as defined in a data mine. The instance of the bot runs the defined processes and generates the defined data products."

indicator_process_instance: "An indicator process instance is a reference to the process definition of an indicator bot, as defined in a data mine."

sensor_bot_instance: "A sensor bot instance is a reference to a sensor bot as defined in a data mine. The instance of the bot runs the defined processes and generates the defined data products."

sensor_process_instance: "A sensor process instance is a reference to the process definition of a sensor bot, as defined in a data mine."



testing_environment: "The testing environment node organizes trading sessions involving testing of trading systems."

production_environment: "The production environment node organizes trading sessions involving live trading."

exchange_trading_tasks: "The exchange trading tasks node organizes trading tasks by exchange. That is, each exchange installed in the system has an exchange trading tasks node grouping all market trading tasks corresponding to the said exchange."

market_trading_tasks: "A market trading tasks node groups trading tasks operating in a specific market."

trading_mine_tasks: "The trading mine tasks node is an organizational device that groups tasks corresponding to the referenced trading mine."

trading_bot_instance: "A trading bot instance is a reference to the trading bot as defined in the Masters data mine. The instance of the bot runs the defined processes and generates the defined data products."

trading_process_instance: "A trading process instance is a reference to the process definition of the trading bot, as defined in the Masters data mine."

backtesting_session: "A backtesting session is a trading mode by which the trading bot instance reads historic market data in a user-defined datetime range, applies the rules defined in the associated trading system, and generates a trading simulation."

paper_trading_session: "A paper trading session is a trading mode by which the trading bot instance reads a live market data feed, applies the rules defined in the associated trading system, and generates a trading simulation."

forward_testing_session: "A forward testing session is a trading mode by which the trading bot instance performs live trading with a user-defined fraction of the available capital."

live_trading_session: "A live trading session is a trading mode by which the trading bot instance reads a live market data feed, applies the rules as defined in the associated trading system, places the corresponding orders at the associated exchange, and stores the defined data products."

trading_engine_reference: "A trading engine reference determines which trading engine the trading bot shall use to structure the data it processes while running the trading session."

trading_system_reference: "A trading engine reference determines which trading system shall be evaluated by the trading bot to run the trading session."

trading_parameters: "Parameters are properties of trading sessions, defined by users, to determine their behavior and improve the quality of simulations."

session_base_asset: "The base asset is the asset whose price is determined by the market. It is usually the first asset in the pair, as listed by the exchange."

session_quoted_asset: "The quoted asset is the asset on which the price of the base asset is denominated in the market. It is usually the second asset in the pair, as listed by the exchange."

time_frame: "The time frame determines the collection of candles to be analyzed during a backtesting session, and the frequency with which the trading bot runs on paper trading, forward testing, and live trading sessions."

time_frames_filter: "The time frame filters node allows control over which time frames are to be calculated by each indicator bot instance running on the data mining operation."

time_range: "The time range parameter determines the period of time on which the trading session is run."

slippage: "The slippage is an assumption on the difference between the simulated rate and the actual fill rate of a market order, most relevant in the context of backtesting and paper-trading sessions. The parameter is a tool to make simulations more realistic."

snapshots: "Snapshots are CSV files output by the trading bot listing every trade in a backtesting session. The snapshots parameter determines whether snapshots shall be produced, and how."

heartbeats: "During a trading session, the backend communicates with the frontend via heartbeats to inform the frontend about the status of the session. The parameter controls what information is made available to the user through the frontend."

user_defined_parameters: "Users may define parameters to be used within the trading system during the trading session."

fee_structure: "The fee structure is a parameter fundamental to the calculation of fees, both in testing and live trading sessions."

key_reference: "The key reference is a reference to an exchange account key as defined in a specific user account, in a specific exchange, on the Crypto Ecosystem hierarchy."



session: "A session, or trading session, is a specific mode in which the trading bot instance may be run. The trading bot is prepared to run three different types of testing sessions&mdash;backtesting, paper trading, and forward testing&mdash;and the live trading session mode."

network_of_nodes: "A network of nodes is an arrangement that allows distributing tasks among any number of network nodes, allowing for coordinated, flexible, and scalable trading operations."